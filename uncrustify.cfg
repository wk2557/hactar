#
# uncrustify config file for scratch project
#

utf8_bom = remove # remove UTF-8 BOM
utf8_force = true # force the output encoding to UTF-8

newlines = CRLF # the type of line endings is Windows compatible
input_tab_size = 4 # the original size of tabs in the input
output_tab_size = 4 # the size of tabs in the output
code_width = 80 # compatible with 80x24 terminals

ls_for_split_full = true # split long 'for' statements at semi-colons
ls_func_split_full = true # split long function protos/calls at commas
ls_code_width = true # split lines as close to code_width

pos_class_comma = lead # trail comma in the ctor init list
pos_class_colon = lead # trail colons between ctor and member init

cmt_width = code_width # wrap comments at cmt_width columns
cmt_indent_multi = false # disable all multi-line comment changes
pp_define_at_level = false # indent #define from leftmost column

mod_full_brace_do = add # add braces on single-line 'do' statement
mod_full_brace_for = add # add braces on single-line 'for' statement
mod_full_brace_if = add	# add braces on single-line 'if' statement
mod_full_brace_while = add # add braces on single-line 'while' statement
mod_full_brace_using = add # add braces on single-line 'using ()' statement
mod_paren_on_return = remove # remove unnecessary paren on 'return' statement
mod_full_paren_if_bool = true # add parens on 'while' and 'if' around bools
mod_remove_extra_semicolon = true # remove superfluous semicolons
mod_sort_include = false # don't sort consecutive single-line '#include'
mod_move_case_break = true # move a 'break' before the close brace
mod_case_brace = add # add braces around a fully braced case statement
mod_remove_empty_return = true # remove a void 'return;' as the last statement 

align_keep_tabs = true # keep non-indenting tabs
align_with_tabs = true # use tabs for aligning
align_on_tabstop = true # bump out to the next tab when aligning
align_pp_define_span = 0 # don't span preprocessor
align_var_def_inline = false # don't align inline variable definitions

indent_columns = output_tab_size # indent tab size of columns per level
indent_with_tabs = 2 # use tabs when indenting code
indent_cmt_with_tabs = false # Comments are indented with tabs on a tabstop
indent_align_string = true # indent strings broken by '\' so that they line up
indent_xml_string = indent_columns # indent tab size to multi-line XML strings
indent_brace = 0 # no spaces to indent '{' from level
indent_braces = false # no braces are indented to the body level
indent_brace_parent = false # indent not based on the size of the brace parent
indent_namespace = false # the 'namespace' body is not indented
indent_namespace_level = 0 # no spaces to indent a namespace block
indent_namespace_limit = 0 # the 'namespace' body is not indented for `diff -p`
indent_extern = false # the 'extern "C"' body is not indented
indent_class = false # the 'class' body is not indented for `diff -p`
indent_class_colon = false # indent the stuff after a leading class colon
indent_ctor_init_leading = indent_columns # indent for member initializers
indent_ctor_init = indent_columns # indent for constructor initializer list
indent_else_if = false # treat 'else\nif' as 'else if' for indenting purposes
indent_member = 0 # no spaces to indent a continued '->' or '.'
indent_sing_line_comments = 0 # no Spaces to indent single line comments
indent_relative_single_line_comments = false # keep the same absolute column
indent_switch_case = 0 # no spaces to indent 'case' from 'switch'
indent_case_shift = 0 # no spaces to shift the 'case' line
indent_case_brace = 0 # no spaces to indent '{' from 'case'
indent_col1_comment = false # Don't indent comments found in first column
indent_label = 0 # indent goto labels in leftmost column
indent_paren_nl = false # indent the next line
indent_paren_close = 0 # indent a close paren after a newline to body level
indent_comma_paren = false # no indent of a comma when inside a paren
indent_bool_paren = false # no indent of a BOOL operator when inside a paren
indent_square_nl = true # indent the next line
indent_preserve_sql = false # Preserve the relative indent of 'EXEC SQL' bodies
indent_align_assign = true # Align continued statements at the '='
indent_func_call_param = true # Indent not align parameters
indent_func_def_param = true # Indent not align parameters
indent_func_proto_param = true # Indent not align parameters
indent_func_class_param = true # Indent not align parameters
indent_func_ctor_var_param = true # Indent not align parameters
indent_template_param = true # Indent not align parameters

sp_arith = add # add space around arithmetic operator
sp_assign = add # add space around assignment operator
sp_cpp_lambda_assign = remove # remove space around '=' in C++11 lambda capture
sp_cpp_lambda_paren = remove # remove space after the C++11 lambda capture
sp_assign_default = add # add space around assignment operator in a prototype
sp_enum_assign = add # add space around assignment '=' in enum
sp_pp_concat = remove # remove space around preprocessor '##' operator
sp_pp_stringify = remove # remove space after preprocessor '#' operator
sp_before_pp_stringify = remove # remove space before preprocessor '#' operator
sp_bool = add # add space around boolean operators
sp_compare = add # add space around compare operator
sp_inside_paren = remove # remove space inside '(' and ')'
sp_paren_paren = remove # remove space between nested parens
sp_balance_nested_parens = false # balance spaces inside nested parens
sp_paren_brace = add # add space between ')' and '{'
sp_before_ptr_star = remove # remove space before pointer star '*'
sp_between_ptr_star = remove # remove space between pointer stars '*'
sp_after_ptr_star = add # add space after pointer star '*'
sp_after_ptr_star_func = add # add space after a func pointer star '*'
sp_ptr_star_paren = add # add space after a open paren pointer star '*'
sp_before_ptr_star_func = remove # remove space before a func pointer star '*'
sp_before_byref = remove # remove space before a reference sign '&'
sp_after_byref = add # add space after reference sign '&'
sp_after_byref_func = add # add space after func reference sign '&'
sp_before_byref_func = remove # remove space before a func reference sign '&'
sp_after_type = add # add space between type and word
sp_template_angle = remove # remove space in 'template <' vs 'template<'
sp_before_angle = remove # remove space before '<>'
sp_inside_angle = remove # add space inside '<' and '>'
sp_after_angle = add # add space after '<>'
sp_angle_paren = add # remove space between '<>' and '('
sp_angle_word = add # add space between '<>' and a word
sp_angle_shift = add # add space between '>' and '>' in '>>'
sp_permit_cpp11_shift = false # space between '>>' in 'foo<bar<int> >' (C++11)
sp_before_sparen = add # add space before '(' of 'if', 'for', etc.
sp_inside_sparen = remove # remove space inside if-condition '(' and ')'
sp_after_sparen = add # add space after ')' of 'if', 'for', etc.
sp_sparen_brace = add # add or remove space between ')' and '{' of 'if', etc.
sp_special_semi = add # aspace before empty statement ';' on 'if', etc.
sp_before_semi = remove # remove space before ';'
sp_before_semi_for = remove # remove space before ';' in non-empty 'for'
sp_before_semi_for_empty = add # add space before a semicolon of an empty for
sp_after_semi = add # add space after ';', except when followed by a comment
sp_after_semi_for = add # add space after ';' in non-empty 'for' statements
sp_after_semi_for_empty = add # add space after the final semicolon of empty for
sp_before_square = remove # remove space before '[' (except '[]')
sp_inside_square = remove # remove space inside a non-empty '[' and ']'
sp_after_comma = add # add space after ','
sp_before_comma = remove # remove space before ','
sp_paren_comma = add # add space between an open paren and comma: '(,' vs '( ,'
sp_before_ellipsis = add # add space before the variadic '...'
sp_after_class_colon = ignore # add space after class ':'
sp_before_class_colon = remove # remove space before class ':'
sp_before_case_colon = remove # remove space before case ':'
sp_after_operator = remove # remove space between 'operator' and operator sign
sp_after_operator_sym = remove # remove space between the operator and paren
sp_after_cast = add # add space after C/D cast
sp_inside_paren_cast = remove # remove spaces inside cast parens
sp_cpp_cast_paren = remove # remove space between the type and paren in cast
sp_sizeof_paren = remove # remove space between 'sizeof' and '('
sp_after_tag = add # add space after the tag keyword
sp_inside_braces_enum = add # add space inside enum '{' and '}'
sp_inside_braces_struct = add # add space inside struct/union '{' and '}'
sp_inside_braces = add # add space inside '{' and '}'
sp_inside_braces_empty = add # add space inside '{}'
sp_type_func = add # add space between return type and function name
sp_func_proto_paren = remove # remove space between function name and '('
sp_func_def_paren = remove # remove space between function name and '('
sp_inside_fparens = remove # remove space inside empty function '()'
sp_inside_fparen = remove # remove space inside function '(' and ')'
sp_inside_tparen = remove # remove space inside the first parens in the function
sp_after_tparen_close = remove # add between the parens in the function
sp_square_fparen = remove # remove space between ']' and '(' in function
sp_fparen_brace = add # add space between ')' and '{' of function
sp_func_call_paren = remove # remove space between function name and '('
sp_func_call_paren_empty = ignore # sp_func_call_paren is used
sp_func_class_paren = remove # remove space between a ctor/dtor and paren
sp_return_paren = add # add space between 'return' and '('
sp_attribute_paren = add # add space between '__attribute__' and '('
sp_defined_paren = remove # remove space between 'defined' and '('
sp_throw_paren = add # add space between 'throw' and '('
sp_after_throw = add # add space between 'throw' and anything other
sp_catch_paren = remove # sp_before_sparen is used
sp_version_paren = remove # sp_before_sparen is used
sp_scope_paren = remove # sp_before_sparen is used
sp_macro = add # add space between macro and value
sp_macro_func = add # add space between macro function ')' and value
sp_else_brace = add # add space between 'else' and '{'
sp_brace_else = add # add space between '}' and 'else'
sp_brace_typedef = add # add space between '}' and the name of a typedef
sp_catch_brace = add # add space between 'catch' and '{'
sp_brace_catch = add # add space between '}' and 'catch'
sp_finally_brace = add # add space between 'finally' and '{'
sp_brace_finally = add # add space between '}' and 'finally'
sp_try_brace = add # add space between 'try' and '{'
sp_before_dc = remove # remove space before the '::' operator
sp_after_dc = remove # remove space after the '::' operator
sp_cond_colon = add # add space around the ':' in 'b ? t : f'
sp_cond_question = add # add space around the '?' in 'b ? t : f'
sp_cmt_cpp_start = ignore # ignore space after the opening of a C++ comment
sp_endif_cmt = remove # ignore spaces between #else or #endif
sp_after_new = add # spaces after 'new', 'delete', and 'delete[]'
sp_before_tr_emb_cmt = ignore # add spaces before a trailing or embedded comment
sp_num_before_tr_emb_cmt = 1 # 1 space before a trailing or embedded comment

nl_collapse_empty_body = false # collapse empty blocks between '{' and '}'
nl_start_of_file = remove # no newlines at the start of the file
nl_end_of_file = add # add newline at the end of the file // good for `more`
nl_end_of_file_min = 1 # 1 newlines at the end of the file
nl_typedef_blk_start = 0 # no newlines before a block of typedefs
nl_typedef_blk_end = 2 # 2 newlines after a block of typedefs
nl_typedef_blk_in = 2 # 2 maximum newlines within a block of typedefs

nl_fcall_brace = add # add newline between a function call's ')' and '{'
nl_enum_brace = add # add newline between 'enum' and '{'
nl_struct_brace = add # add newline between 'struct and '{'
nl_union_brace = add # add newline between 'union' and '{'
nl_if_brace = remove # no newline between 'if' and '{'
nl_brace_else = add # add newline between '}' and 'else'
nl_elseif_brace = remove # no newline between 'else if' and '{'
nl_else_brace = remove # no newline between 'else' and '{'
nl_else_if = remove # no newline between 'else' and 'if'
nl_brace_finally = add # add newline between '}' and 'finally'
nl_finally_brace = remove # no newline between 'finally' and '{'
nl_try_brace = remove # no newline between 'try' and '{'
nl_for_brace = remove # no newline between 'for' and '{'
nl_catch_brace = remove # no newline between 'catch' and '{'
nl_brace_catch = add # add newline between '}' and 'catch'
nl_while_brace = remove # no newline between 'while' and '{'
nl_using_brace = remove # no newline between 'using' and '{'
nl_do_brace = remove # no newline between 'do' and '{'
nl_brace_while = remove # add newline between '}' and 'while' of 'do'
nl_switch_brace = remove # no newline between 'switch' and '{'
nl_multi_line_define = false # a newline after multi-line defines
nl_before_case = true # a newline before 'case' statement
nl_before_throw = add # add newline between ')' and 'throw'
nl_after_case = true # add a newline after 'case' statement
nl_namespace_brace = remove # no newline between namespace and {
nl_template_class = add # add newline after 'template<>'
nl_class_brace = add # add newline between 'class' and '{'
nl_class_init_args = add # add newline after each ',' in the ctor init args
nl_func_type_name = add # add newline between return type and function name
nl_func_type_name_class = ignore # uses nl_func_type_name 
nl_func_scope_name = remove # no newline between function scope and name
nl_func_proto_type_name = remove # add newline between return type and function
nl_func_paren = remove # no newline between a function name and '('
nl_func_def_paren = remove # no newline between a function name and '('
nl_func_decl_start = remove # no newline after '(' in a function
nl_func_def_start = remove # no newline after '(' in a function definition
nl_fdef_brace = add # add newline between function signature and '{'
nl_return_expr = remove # no newline between the return and expression
nl_after_semicolon = false # no newline after semicolons
nl_after_brace_open = true # put a newline after brace open
nl_after_vbrace_open = true # put a newline after a virtual brace open
nl_after_vbrace_open_empty = true # put a newline after a virtual brace open
nl_after_brace_close = true # put a newline after a brace close
nl_after_vbrace_close = true # put a newline after a virtual brace close
nl_define_macro = false # don't alter newlines in '#define' macros
nl_squeeze_ifdef = false # put blanks after '#ifxx', '#elxx', or before '#endif'
nl_after_if = add # add blank line after 'if' statement
nl_after_for = add # add blank line after 'for' statement
nl_after_while = add # add blank line after 'while' statement
nl_after_switch = add # add blank line after 'switch' statement
nl_after_do = add # add blank line before 'do'
nl_class_colon = add # add a newline around a class colon

nl_max = 2 # 2 maximum consecutive newlines
nl_after_func_proto = 2 # 2 newlines after a function prototype
nl_after_func_proto_group = 2 # 2 newlines after a function prototype
nl_after_func_body = 2 # 2 newlines after '}' of a multi-line function body
nl_after_func_body_class = 2 # 2 newlines after '}' of a function in a class
nl_after_struct = 2 # 2 newlines after '}' or ';' of a struct/enum/union
nl_after_class = 2 # 2 newlines after '}' or ';' of a class
nl_after_access_spec = 1 # 1 newlines after a label
nl_after_try_catch_finally = 2 # 2 newlines after a try-catch-finally block
eat_blanks_after_open_brace = false # remove blank lines after '{'
eat_blanks_before_close_brace = false # remove blank lines before '}'
nl_before_return = true # put a blank line before 'return' statements
nl_after_return = false # don't put a blank line after 'return' statements
